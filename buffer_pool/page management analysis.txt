/**
 * 1. 페이지 초기화
 * 버퍼풀에서 새로운 페이지를 초기화할 때의 핵심 로직
 */
static void buf_page_init(buf_pool_t *buf_pool, 
                         const page_id_t &page_id,
                         const page_size_t &page_size, 
                         buf_block_t *block) {
    // 해시 테이블에서 페이지 검색을 위한 잠금
    ut_ad(rw_lock_own(buf_page_hash_lock_get(buf_pool, page_id), RW_LOCK_X));
    
    // 블록의 상태를 파일 페이지로 설정
    buf_block_set_file_page(block, page_id);
    
    // 블록 초기화
    buf_block_init_low(block);
    
    // 페이지 기본 정보 초기화 
    buf_page_init_low(&block->page);

    // 해시 테이블에 페이지 추가
    HASH_INSERT(buf_page_t, hash, buf_pool->page_hash, page_id.hash(), &block->page);
}

/**
 * 2. 페이지 읽기 요청 처리
 * 디스크에서 페이지를 읽어올 때 사용되는 초기화 함수
 */
buf_page_t *buf_page_init_for_read(ulint mode, 
                                  const page_id_t &page_id,
                                  const page_size_t &page_size, 
                                  bool unzip) {
    // 새로운 블록 할당
    buf_block_t *block = buf_LRU_get_free_block(buf_pool);
    
    // 압축된 페이지 처리
    if (page_size.is_compressed()) {
        data = buf_buddy_alloc(buf_pool, page_size.physical());
    }
    
    // LRU 리스트 뮤텍스 획득
    mutex_enter(&buf_pool->LRU_list_mutex);
    
    // IO 고정 설정 - 읽기 작업 중임을 표시
    buf_page_set_io_fix(bpage, BUF_IO_READ);
    
    // LRU 리스트에 블록 추가 
    buf_LRU_add_block(bpage, true);
}

/**
 * 3. 페이지 상태 전이
 * 페이지의 상태를 관리하는 주요 로직
 */
enum buf_page_state {
    BUF_BLOCK_POOL_WATCH,     // 풀 감시용 더미 블록
    BUF_BLOCK_ZIP_PAGE,       // 압축된 페이지
    BUF_BLOCK_ZIP_DIRTY,      // 수정된 압축 페이지
    BUF_BLOCK_FILE_PAGE,      // 일반 파일 페이지
    BUF_BLOCK_NOT_USED,       // 미사용 블록
    BUF_BLOCK_READY_FOR_USE,  // 사용 준비된 블록
    BUF_BLOCK_MEMORY,         // 메모리 블록
    BUF_BLOCK_REMOVE_HASH     // 해시에서 제거 예정
};

/**
 * 4. IO 완료 처리
 * 페이지 읽기/쓰기 작업 완료 후의 처리
 */
bool buf_page_io_complete(buf_page_t *bpage, bool evict) {
    // IO 유형 확인 (읽기/쓰기)
    const auto io_type = bpage->is_io_fix_read_as_opposed_to_write() 
                        ? BUF_IO_READ : BUF_IO_WRITE;
    
    if (io_type == BUF_IO_READ) {
        // 읽기 완료 처리
        // 압축 페이지 처리
        if (bpage->size.is_compressed()) {
            buf_pool->n_pend_unzip.fetch_add(1);
            if (!buf_zip_decompress((buf_block_t *)bpage, false)) {
                // 압축 해제 실패 처리
            }
        }
        
        // 페이지 검증
        if (compressed_page || is_corrupted) {
            // 손상된 페이지 처리
        }
        
    } else {
        // 쓰기 완료 처리
        buf_flush_write_complete(bpage);
    }
    
    // IO 고정 해제
    buf_page_set_io_fix(bpage, BUF_IO_NONE);
}

/**
 * 5. LRU 리스트 관리
 * 페이지의 LRU 상태 관리를 위한 핵심 구조체와 함수들
 */
struct LRU_list_operations {
    // Young 영역과 Old 영역으로 구분된 LRU 리스트
    void make_block_young(buf_page_t *bpage) {
        // 페이지를 young 영역으로 이동
    }
    
    void make_block_old(buf_page_t *bpage) {
        // 페이지를 old 영역으로 이동
    }
    
    // LRU 리스트에서 재사용 가능한 블록 찾기
    buf_block_t *get_free_block() {
        // 1. free 리스트에서 검색
        // 2. LRU 리스트 끝에서 검색
        // 3. 필요시 flush 수행
    }
};

위 코드에서 볼 수 있는 버퍼풀의 페이지 관리의 주요 특징들은:

# 페이지 상태 관리


각 페이지는 여러 상태(BUF_BLOCK_*)를 가질 수 있음
상태에 따라 다른 처리 로직 적용
IO 작업 중인 페이지는 특별히 관리됨


# 메모리 관리


압축/비압축 페이지 분리 관리
buddy allocator를 사용한 효율적인 메모리 할당
NUMA 아키텍처 고려


# 동시성 제어


다양한 뮤텍스를 사용한 세밀한 동시성 제어
hash_lock, LRU_list_mutex 등을 통한 안전한 접근


# LRU 알고리즘


young/old 영역으로 구분된 관리
페이지 접근 패턴에 따른 동적 조정
효율적인 페이지 교체 정책


# IO 처리


비동기 IO 지원
읽기/쓰기 작업의 구분된 처리
손상된 페이지 복구 메커니즘



---------------------------------------------------------------------------------------------


## buddy allocator 코드 분석 

buf0buf.cc 파일에서 buddy allocator 관련 내용을 찾아보니, 실제 구현은 별도의 buf0buddy.cc 파일에 있는 것으로 보입니다.

하지만 buf0buf.cc에서 buddy allocator를 사용하는 부분을 살펴보면:

// 압축된 페이지를 위한 메모리 할당 시 buddy allocator 사용
if ((block != nullptr && page_size.is_compressed()) || block == nullptr) {
    data = buf_buddy_alloc(buf_pool, page_size.physical());
}

// buf_buddy_alloc()으로 할당된 메모리 해제
buf_buddy_free(buf_pool, data, page_size.physical());

buddy allocator의 자세한 구현과 작동 방식을 설명드리겠습니다:




/**
 * Buddy Allocator 주요 구성 요소 분석
 */

// 1. 핵심 데이터 구조
struct buf_buddy_free_t {
    byte stamp[BUF_BUDDY_STAMP_SIZE]; // 메모리 블록의 상태를 저장하는 스탬프
};

// 2. 중요한 상수들
constexpr uint32_t BUF_BUDDY_STAMP_OFFSET = FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID;
constexpr uint64_t BUF_BUDDY_STAMP_FREE = dict_sys_t::s_log_space_id;

// 3. 할당 과정 (buf_buddy_alloc_zip)
void* buf_buddy_alloc_zip(buf_pool_t *buf_pool, ulint i) {
    // 1) i 크기의 free list에서 블록 검색
    buf = UT_LIST_GET_FIRST(buf_pool->zip_free[i]);
    
    if (buf) {
        // 가용 블록이 있으면 사용
        buf_buddy_remove_from_free(buf_pool, buf, i);
        return buf;
    } else if (i + 1 < BUF_BUDDY_SIZES) {
        // 2) 더 큰 크기의 블록을 분할해서 사용
        buf = buf_buddy_alloc_zip(buf_pool, i + 1);
        if (buf) {
            // 분할된 나머지 블록을 free list에 추가
            buddy = allocated_block + (BUF_BUDDY_LOW << i);
            buf_buddy_add_to_free(buf_pool, buddy, i);
        }
    }
}

// 4. 해제 과정 (buf_buddy_free_low)
void buf_buddy_free_low(buf_pool_t *buf_pool, void *buf, ulint i, bool has_zip_free) {
    // 1) 버디 블록 찾기
    buddy = buf_buddy_get(buf, BUF_BUDDY_LOW << i);
    
    // 2) 버디의 상태 확인
    switch (buf_buddy_is_free(buddy, i)) {
        case BUF_BUDDY_STATE_FREE:
            // 버디가 비어있으면 병합
            buf_buddy_remove_from_free(buf_pool, buddy, i);
            i++;  // 크기를 두 배로
            goto recombine;  // 재귀적으로 더 큰 버디 확인
            
        case BUF_BUDDY_STATE_USED:
        case BUF_BUDDY_STATE_PARTIALLY_USED:
            // 버디가 사용중이면 현재 블록만 free list에 추가
            buf_buddy_add_to_free(buf_pool, buf, i);
    }
}

// 5. 재배치 과정 (buf_buddy_relocate)
bool buf_buddy_relocate(buf_pool_t *buf_pool, void *src, void *dst, ulint i, bool force) {
    // 1) 페이지 검증
    space = mach_read_from_4(src + FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID);
    offset = mach_read_from_4(src + FIL_PAGE_OFFSET);
    
    // 2) 페이지가 재배치 가능한 상태인지 확인
    if (buf_page_can_relocate(bpage)) {
        // 3) 실제 데이터 복사
        memcpy(dst, src, size);
        bpage->zip.data = dst;
        
        // 4) 통계 업데이트
        buddy_stat->relocated++;
        return true;
    }
    
    return false;
}


Buddy Allocator의 주요 장점:

효율적인 메모리 관리

내부 단편화 최소화
빠른 할당/해제 연산
메모리 병합이 용이함


InnoDB에서의 활용

압축된 페이지 저장에 최적화
다양한 크기의 압축 페이지 효율적 관리
메모리 단편화 방지


구현상의 특징

크기별 free list 관리
메모리 블록의 버디(buddy) 쉽게 찾기 가능
O(1) 시간 복잡도의 할당/해제 연산



예시 시나리오:
plaintextCopy16KB 페이지 압축 요청 시:
1. 압축 후 크기가 8KB
2. buf_buddy_alloc(8KB) 호출
3. 8KB free list 검색
4. 없으면 16KB 블록을 분할
5. 남은 8KB는 free list에 추가


이 구현의 주요 특징들은:

메모리 관리 방식


메모리를 2의 거듭제곱 크기로 관리
각 크기별로 별도의 free list 유지
빈 블록에 특별한 stamp를 마킹하여 상태 추적


할당 전략


요청된 크기와 정확히 일치하는 블록을 먼저 찾음
없으면 더 큰 블록을 분할하여 사용
최적의 크기를 찾기 위해 재귀적으로 탐색


해제 전략


인접한 buddy block이 비어있으면 병합
병합된 블록으로 더 큰 블록 생성 가능
재귀적으로 병합 시도


재배치 기능


메모리 단편화 감소를 위한 블록 재배치 지원
페이지 상태를 확인하여 안전한 재배치만 수행
재배치 성능 측정을 위한 통계 수집


동시성 제어


zip_free_mutex를 통한 thread-safe 보장
복잡한 뮤텍스 관리로 데드락 방지
안전한 메모리 재배치를 위한 잠금 체계

이 구현은 MySQL/InnoDB의 압축 페이지를 효율적으로 관리하기 위해 최적화되어 있습니다.


--------------------------------------------------------------------------------------------------



/**
 * buf_buddy_free_t 구조체 상세 분석
 */

/* buddy allocator에서 사용하는 메모리 블록의 헤더 구조체 */
struct buf_buddy_free_t {
    union {
        byte bytes[BUF_BUDDY_STAMP_SIZE];  // 실제 데이터를 저장하는 공간
        struct {
            byte size;          // 블록의 크기 정보(zip_free[] 인덱스)
            byte bytes[3];      // 패딩 및 추가 정보
        } size;
    } stamp;
};

/* 주요 상수 정의 */
// 블록이 free 상태임을 나타내는 스탬프 값
constexpr uint64_t BUF_BUDDY_STAMP_FREE = dict_sys_t::s_log_space_id;

// 블록이 사용중임을 나타내는 스탬프 값 
constexpr uint64_t BUF_BUDDY_STAMP_NONFREE = 0XFFFFFFFFUL;

// 스탬프가 저장되는 오프셋
constexpr uint32_t BUF_BUDDY_STAMP_OFFSET = FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID;

/**
 * 스탬프 조작 관련 함수들
 */
// 1. 스탬프가 free 상태인지 확인
static inline bool buf_buddy_stamp_is_free(const buf_buddy_free_t *buf) {
    return (mach_read_from_4(buf->stamp.bytes + BUF_BUDDY_STAMP_OFFSET) 
            == BUF_BUDDY_STAMP_FREE);
}

// 2. 블록을 free 상태로 마킹
static inline void buf_buddy_stamp_free(buf_buddy_free_t *buf, ulint i) {
    buf_buddy_mem_invalid(buf, i);
    mach_write_to_4(buf->stamp.bytes + BUF_BUDDY_STAMP_OFFSET,
                    BUF_BUDDY_STAMP_FREE);
    buf->stamp.size = i;  // 블록의 크기 정보 저장
}

// 3. 블록을 사용중 상태로 마킹
static inline void buf_buddy_stamp_nonfree(buf_buddy_free_t *buf, ulint i) {
    buf_buddy_mem_invalid(buf, i);
    memset(buf->stamp.bytes + BUF_BUDDY_STAMP_OFFSET, 0xff, 4);
}

/**
 * 사용 예시:
 */
void example_usage() {
    // 1. 새로운 free 블록 생성 시
    buf_buddy_free_t* block = ...;
    buf_buddy_stamp_free(block, size_index);
    
    // 2. 블록 할당 시
    if (buf_buddy_stamp_is_free(block)) {
        buf_buddy_stamp_nonfree(block, size_index);
        // 블록 사용...
    }
    
    // 3. 블록 상태 확인
    bool is_free = buf_buddy_stamp_is_free(block);
    ulint block_size = block->stamp.size;
}


이 구조체의 주요 특징과 용도는 다음과 같습니다:

구조체의 목적


메모리 블록의 상태를 추적하기 위한 메타데이터 저장
블록이 free인지 사용중인지 구분
블록의 크기 정보 저장


주요 구성 요소


stamp union: 메모리 재사용을 위한 유니온 구조체

bytes[]: 일반적인 바이트 배열 접근용
size 구조체: 블록 크기 정보 관리용




스탬프의 용도


FREE/NONFREE 상태 표시
블록의 크기 정보 저장
메모리 블록 검증을 위한 데이터 저장


중요한 특징


메모리 재사용: 압축된 페이지 데이터와 동일한 공간 공유
효율적인 상태 체크: 4바이트 값으로 빠른 상태 확인 가능
안전한 메모리 관리: 잘못된 메모리 접근 방지


사용되는 상황


메모리 블록 할당/해제 시 상태 관리
버디 블록 병합 가능 여부 확인
메모리 블록 크기 관리
메모리 재사용 시 블록 검증

이 구조체는 MySQL의 버퍼 풀에서 압축된 페이지를 효율적으로 관리하기 위한 핵심 요소입니다.


---------------------------------------------------------------------------------

/**
 * UNION 사용의 목적과 안정성 분석
 */

// 1. 실제 구조체 정의
struct buf_buddy_free_t {
    union {
        // 전체 공간을 바이트 배열로 접근
        byte bytes[BUF_BUDDY_STAMP_SIZE];  
        
        // 구조화된 형태로 접근
        struct {
            byte size;       // 블록의 크기(zip_free[] 인덱스)
            byte bytes[3];   // 추가 정보
        } size;
    } stamp;
};

/**
 * 2. 메모리 레이아웃
 * 
 * union stamp {
 *   +-------------------+
 *   |     bytes[4]      |  <- 4바이트 전체 공간
 *   +-------------------+
 *             ↕               같은 메모리 공간을 공유
 *   +--------+----------+
 *   | size   | bytes[3] |  <- 1바이트 size + 3바이트 추가정보
 *   +--------+----------+
 * }
 */


UNION을 사용하는 이유를 코드와 함께 설명드리겠습니다.
Buffer Buddy Union Structure AnalysisClick to open code
UNION을 사용하는 주요 이유:

메모리 효율성


같은 메모리 공간을 다른 용도로 재사용하여 메모리 절약
4바이트 공간을 최대한 활용 가능


유연한 접근 방식


bytes[]: 전체 공간을 바이트 단위로 접근할 때 사용
size 구조체: 블록 크기 정보를 구조화된 형태로 접근할 때 사용


상호 배타적 사용


FREE 상태일 때만 size 정보가 유효
NONFREE 상태일 때는 size 정보가 필요 없음
두 상태가 동시에 필요하지 않음

덮어쓰기 문제 방지:

명확한 상태 구분

cppCopy// 상태 확인 함수로 안전하게 접근
if (buf_buddy_stamp_is_free(block)) {
    // FREE 상태일 때만 size 정보 사용
    ulint size = block->stamp.size;
}

캡슐화된 접근

cppCopy// 직접 접근 대신 함수를 통한 안전한 조작
buf_buddy_stamp_free(block, size);
buf_buddy_stamp_nonfree(block, size);

상태 전이 규칙


FREE → NONFREE: 블록 할당 시
NONFREE → FREE: 블록 해제 시
각 전이는 명확한 함수 호출로 이루어짐

이런 방식으로 UNION을 사용하면서도 안전성을 보장할 수 있습니다.


----------------------------------------------------------------------------------------

/**
 * FREE 마커 설정 메커니즘 상세 설명
 */

// 1. 관련된 상수 정의
constexpr uint32_t FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID = 34; // 페이지 내 space ID 위치
constexpr uint32_t BUF_BUDDY_STAMP_OFFSET = FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID;
constexpr uint64_t BUF_BUDDY_STAMP_FREE = 0xFFFFFFFF;  // FREE 상태를 나타내는 값

// 2. 메모리에 값을 쓰는 함수
void mach_write_to_4(byte* ptr, uint64_t value) {
    // 4바이트 값을 메모리에 쓰는 저수준 함수
    memcpy(ptr, &value, 4);
}

/**
 * 3. 실제 사용 예시 
 */
void explain_free_marker() {
    buf_buddy_free_t* block = get_some_block();
    
    // FREE 마커 설정하기
    byte* target_address = block->stamp.bytes + BUF_BUDDY_STAMP_OFFSET;
    //    └> 블록의 시작 주소   └> 34바이트 offset
    
    mach_write_to_4(target_address, BUF_BUDDY_STAMP_FREE);
    //             어디에,        무슨 값을
    
    /* 예시: 메모리 레이아웃
     *
     * block->stamp.bytes (메모리 시작)
     * +--------------------------------+
     * | 0 | 1 | ... | 34| 35| 36| 37 |  <- 바이트 위치
     * +--------------------------------+
     *               ↑
     *               여기에 FREE 마커(0xFFFFFFFF) 기록
     *               (4바이트 크기)
     */
}

/**
 * 4. FREE 마커를 사용하는 이유
 */
void why_use_free_marker() {
    /* 일반적인 페이지의 경우:
     * - 34번 위치에 space ID 저장
     * - space ID는 절대 0xFFFFFFFF가 될 수 없음
     * 
     * FREE 상태의 경우:
     * - 34번 위치에 0xFFFFFFFF 저장
     * - 이 값으로 해당 블록이 FREE임을 판단
     */
    
    buf_buddy_free_t* block = get_some_block();
    byte* space_id_pos = block->stamp.bytes + BUF_BUDDY_STAMP_OFFSET;
    
    uint32_t value = mach_read_from_4(space_id_pos);
    if (value == BUF_BUDDY_STAMP_FREE) {
        printf("이 블록은 FREE 상태입니다\n");
    } else {
        printf("이 블록은 사용중입니다 (space ID: %u)\n", value);
    }
}


일반적인 InnoDB 페이지는:

34번째 바이트 위치에 space ID를 저장합니다
이 space ID는 데이터베이스 내 테이블스페이스를 구분하는 번호입니다


버디 할당자는 블록이 비어있음을 표시하기 위해:

같은 34번째 위치(BUF_BUDDY_STAMP_OFFSET)에
특별한 값(BUF_BUDDY_STAMP_FREE, 0xFFFFFFFF)을 기록합니다


mach_write_to_4 함수는:

첫 번째 인자: 값을 쓸 메모리 위치 (블록시작 + 34바이트)
두 번째 인자: 쓸 값 (FREE 표시값)
4바이트 크기의 값을 메모리에 기록하는 함수입니다



즉, 이 코드는 "이 메모리 블록이 현재 사용 가능한 상태다"라는 표시를 하는 것입니다. 마치 빈 주차 공간에 "비어있음" 표시를 하는 것과 비슷한 개념입니다.

---------------------------------------------------------------------------------------------------------------------------

dict_sys_t::s_log_space_id 는 뭘까

/**
 * InnoDB의 테이블스페이스 ID 체계
 */

// dict/dict0dict.h 또는 dict/dict0dict.cc에서
class dict_sys_t {
public: 
    /** system tablespace space id (always 0) */
    static constexpr space_id_t s_sys_space_id = 0;

    /** 로그 테이블스페이스용으로 예약된 ID */
    static constexpr space_id_t s_log_space_id = 0xFFFFFFF0UL;
};

/**
 * 테이블스페이스 ID 할당 규칙:
 * 
 * 1. 시스템 테이블스페이스: ID = 0
 * +----------------+
 * | space_id = 0  | <- 시스템 테이블스페이스
 * +----------------+
 * 
 * 2. 일반 테이블스페이스: ID > 0
 * +----------------+
 * | space_id = 1  | <- 첫 번째 사용자 테이블스페이스
 * +----------------+
 * | space_id = 2  | <- 두 번째 사용자 테이블스페이스
 * +----------------+
 * |      ...      |
 * 
 * 3. 특수 목적 테이블스페이스: 높은 ID 값
 * +------------------+
 * | 0xFFFFFFF0      | <- 로그 테이블스페이스 (s_log_space_id)
 * +------------------+
 */

void explain_space_id_usage() {
    // 버디 할당자에서의 활용
    constexpr uint64_t BUF_BUDDY_STAMP_FREE = dict_sys_t::s_log_space_id;
    
    // 이 값(0xFFFFFFF0)을 FREE 마커로 사용하는 이유:
    // 1. 일반적인 테이블스페이스 ID는 이 값이 될 수 없음
    // 2. 특수한 값이므로 실제 space_id와 구분이 명확함
    // 3. 로그 테이블스페이스용으로 예약된 값이라 충돌 가능성이 없음
    
    buf_buddy_free_t* block = get_some_block();
    
    // FREE 상태 체크
    bool is_free = (mach_read_from_4(block->stamp.bytes + BUF_BUDDY_STAMP_OFFSET) 
                    == BUF_BUDDY_STAMP_FREE);
    
    if (is_free) {
        // 이 값이 발견되면 해당 블록은 FREE 상태
        printf("Block is free\n");
    } else {
        // 다른 값이면 실제 테이블스페이스 ID
        space_id_t space_id = mach_read_from_4(block->stamp.bytes + 
                                              BUF_BUDDY_STAMP_OFFSET);
        printf("Block belongs to tablespace %u\n", space_id);
    }
}

 s_log_space_id는 테이블스페이스 ID와 관련이 있습니다.
MySQL/InnoDB에서 테이블스페이스 ID는 다음과 같이 구분됩니다:
Space ID AnalysisClick to open code
주요 포인트:

테이블스페이스 ID 종류


0: 시스템 테이블스페이스
1~N: 일반 사용자 테이블스페이스
0xFFFFFFF0: 로그 테이블스페이스용으로 예약된 특수 ID


s_log_space_id의 용도


원래는 로그 테이블스페이스를 위해 예약된 ID
버디 할당자에서는 이 값을 FREE 마커로 재활용
일반 테이블스페이스 ID와 절대 겹칠 수 없는 값이므로 안전


버디 할당자에서의 활용


블록이 FREE 상태임을 나타내는 특별한 표시값으로 사용
space_id 위치에 이 값이 있으면 해당 블록이 사용 가능한 상태임을 의미
실제 테이블스페이스 ID와 구분이 명확함

이렇게 이미 예약된 특수한 ID 값을 FREE 마커로 재활용함으로써, 추가적인 메모리 공간 없이도 블록의 상태를 안전하게 표시할 수 있습니다
